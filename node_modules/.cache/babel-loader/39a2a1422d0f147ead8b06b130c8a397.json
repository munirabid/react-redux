{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducer: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.counter++;\n    },\n    decrement: state => {\n      state.counter++;\n    },\n    increase: (state, action) => {\n      state.counter += action.payload;\n    },\n    toogleCounter: state => {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nexport default counterSlice.reducer;","map":{"version":3,"sources":["C:/Muneer/React/react-redux/src/store/counter.js"],"names":["createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducer","increment","state","decrement","increase","action","payload","toogleCounter"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AAEA,OAAO,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AACtCK,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,YAAY,EAAEL,mBAFwB;AAGtCM,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACP,OAAN;AACD,KAPM;AAQPQ,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACP,OAAN;AACD,KAVM;AAWPS,IAAAA,QAAQ,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AAC3BH,MAAAA,KAAK,CAACP,OAAN,IAAiBU,MAAM,CAACC,OAAxB;AACD,KAbM;AAcPC,IAAAA,aAAa,EAAGL,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACD;AAhBM;AAH6B,CAAD,CAAhC;AAyBP,eAAeC,YAAY,CAACG,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducer: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.counter++;\r\n    },\r\n    decrement: (state) => {\r\n      state.counter++;\r\n    },\r\n    increase: (state, action) => {\r\n      state.counter += action.payload;\r\n    },\r\n    toogleCounter: (state) => {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n\r\n\r\nexport default counterSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}