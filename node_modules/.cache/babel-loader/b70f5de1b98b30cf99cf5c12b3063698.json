{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.counter++;\n    },\n    decrement: state => {\n      state.counter++;\n    },\n    increase: (state, action) => {\n      state.counter += action.payload;\n    },\n    toogleCounter: state => {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"authentication\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAthenticated = true;\n    },\n\n    logout(state) {\n      state.isAthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const auth = authSlice.actions;\nexport default store;","map":{"version":3,"sources":["C:/Muneer/React/react-redux/src/store/index.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toogleCounter","initialAuthState","isAthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AAEA,OAAO,MAAMC,YAAY,GAAGL,WAAW,CAAC;AACtCM,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,YAAY,EAAEL,mBAFwB;AAGtCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACP,OAAN;AACD,KAPO;AAQRQ,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACP,OAAN;AACD,KAVO;AAWRS,IAAAA,QAAQ,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AAC3BH,MAAAA,KAAK,CAACP,OAAN,IAAiBU,MAAM,CAACC,OAAxB;AACD,KAbO;AAcRC,IAAAA,aAAa,EAAGL,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACD;AAhBO;AAH4B,CAAD,CAAhC;AAuBP,MAAMY,gBAAgB,GAAG;AAAEC,EAAAA,cAAc,EAAE;AAAlB,CAAzB;AAEA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,gBADsB;AAE5BC,EAAAA,YAAY,EAAES,gBAFc;AAG5BR,EAAAA,QAAQ,EAAE;AACRW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACO,cAAN,GAAuB,IAAvB;AACD,KAHO;;AAIRG,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACO,cAAN,GAAuB,KAAvB;AACD;;AANO;AAHkB,CAAD,CAA7B;AAaA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AAC3BqB,EAAAA,OAAO,EAAE;AACPnB,IAAAA,OAAO,EAAEE,YAAY,CAACiB,OADf;AAEPC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAFT;AADkB,CAAD,CAA5B;AAOA,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAApC;AACP,OAAO,MAAMF,IAAI,GAAGL,SAAS,CAACO,OAAvB;AAEP,eAAeJ,KAAf","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.counter++;\r\n    },\r\n    decrement: (state) => {\r\n      state.counter++;\r\n    },\r\n    increase: (state, action) => {\r\n      state.counter += action.payload;\r\n    },\r\n    toogleCounter: (state) => {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst initialAuthState = { isAthenticated: false };\r\n\r\nconst authSlice = createSlice({\r\n  name: \"authentication\",\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    counter: counterSlice.reducer,\r\n    auth: authSlice.reducer,\r\n  },\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const auth = authSlice.actions;\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}